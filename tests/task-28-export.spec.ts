import { test, expect } from '@playwright/test'

test.describe('Task 28: PDF/CSV Export Edge Route', () => {
  test('CSV export works with default parameters', async ({ page }) => {
    // Test basic CSV export
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv'
    )
    expect(response?.status()).toBe(200)

    // Check response headers
    const headers = response?.headers()
    expect(headers?.['content-type']).toBe('text/csv')
    expect(headers?.['content-disposition']).toContain('attachment')
    expect(headers?.['content-disposition']).toContain('.csv')

    // Check content
    const content = await page.textContent('body')
    expect(content).toContain('Future Value Investment Calculator Export')
    expect(content).toContain('Initial Investment,10000')
    expect(content).toContain('Monthly Contribution,500')
    expect(content).toContain('Annual Return Rate,%,7')
    expect(content).toContain('Time Horizon (Years),20')
    expect(content).toContain('Year-by-Year Breakdown')
    expect(content).toContain('Year,Start Value,End Value')
  })

  test('CSV export works with custom parameters', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv&initial=5000&monthly=1000&return=10&years=15&currency=EUR'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')
    expect(content).toContain('Initial Investment,5000')
    expect(content).toContain('Monthly Contribution,1000')
    expect(content).toContain('Annual Return Rate,%,10')
    expect(content).toContain('Time Horizon (Years),15')
    expect(content).toContain('Currency: EUR')
  })

  test('PDF export works with default parameters', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=pdf'
    )
    expect(response?.status()).toBe(200)

    // Check response headers
    const headers = response?.headers()
    expect(headers?.['content-type']).toBe('application/pdf')
    expect(headers?.['content-disposition']).toContain('attachment')
    expect(headers?.['content-disposition']).toContain('.pdf')

    // Check content (this is a stub PDF implementation)
    const content = await page.textContent('body')
    expect(content).toContain('Future Value Investment Calculator Report')
    expect(content).toContain('INPUT PARAMETERS')
    expect(content).toContain('Initial Investment: USD 10,000')
    expect(content).toContain('SUMMARY RESULTS')
    expect(content).toContain('YEAR-BY-YEAR BREAKDOWN')
    expect(content).toContain('Generated by Nature2Pixel Financial Tools')
  })

  test('PDF export works with custom parameters', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=pdf&initial=2500&monthly=750&return=8&years=10&currency=GBP'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')
    expect(content).toContain('Initial Investment: GBP 2,500')
    expect(content).toContain('Monthly Contribution: GBP 750')
    expect(content).toContain('Annual Return Rate: 8%')
    expect(content).toContain('Time Horizon: 10 years')
    expect(content).toContain('Currency: GBP')
  })

  test('defaults to CSV when no format specified', async ({ page }) => {
    const response = await page.goto('http://localhost:3007/api/export')
    expect(response?.status()).toBe(200)

    const headers = response?.headers()
    expect(headers?.['content-type']).toBe('text/csv')
  })

  test('returns error for invalid format', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=invalid'
    )
    expect(response?.status()).toBe(400)

    const content = await page.textContent('body')
    expect(content).toContain('Invalid format. Use csv or pdf.')
  })

  test('CSV contains proper financial calculations', async ({ page }) => {
    // Test with known values to verify calculations
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv&initial=1000&monthly=100&return=5&years=5'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')

    // Check that year-by-year data is included
    expect(content).toContain('0,1000,1000,1000,0,0') // Year 0: initial investment

    // Check that final year data is reasonable
    const lines = content.split('\n')
    const yearlyDataLines = lines.filter(
      (line) => line.match(/^\d+,\d+,\d+,\d+,.*/) && !line.startsWith('Year,')
    )

    expect(yearlyDataLines.length).toBeGreaterThan(0)

    // Verify the final year has reasonable values
    const finalYearLine = yearlyDataLines[yearlyDataLines.length - 1]
    const [year, startValue, endValue, totalContrib, totalGrowth] =
      finalYearLine.split(',').map(Number)

    expect(year).toBe(5) // 5 years
    expect(totalContrib).toBe(7000) // 1000 initial + 5 years * 12 months * 100
    expect(endValue).toBeGreaterThan(totalContrib) // Should have growth
    expect(totalGrowth).toBeGreaterThan(0) // Should have positive growth
  })

  test('PDF contains proper financial calculations', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=pdf&initial=1000&monthly=100&return=5&years=3'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')

    // Check summary calculations are present
    expect(content).toContain('Final Future Value:')
    expect(content).toContain('Total Contributions:')
    expect(content).toContain('Total Growth:')
    expect(content).toContain('Return on Investment:')

    // Check year-by-year breakdown
    expect(content).toContain('YEAR-BY-YEAR BREAKDOWN')
    expect(content).toContain('Year | End Value')

    // Should include data for years 0-3
    expect(content).toMatch(/\s+0\s+\|/)
    expect(content).toMatch(/\s+1\s+\|/)
    expect(content).toMatch(/\s+2\s+\|/)
    expect(content).toMatch(/\s+3\s+\|/)
  })

  test('handles edge case: zero values', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv&initial=0&monthly=0&return=0&years=1'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')
    expect(content).toContain('Initial Investment,0')
    expect(content).toContain('Monthly Contribution,0')
    expect(content).toContain('Annual Return Rate,%,0')
    expect(content).toContain('Time Horizon (Years),1')
  })

  test('CSV filename includes date', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv'
    )
    expect(response?.status()).toBe(200)

    const headers = response?.headers()
    const contentDisposition = headers?.['content-disposition']
    expect(contentDisposition).toMatch(
      /future-value-calculation-\d{4}-\d{2}-\d{2}\.csv/
    )
  })

  test('PDF filename includes date', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=pdf'
    )
    expect(response?.status()).toBe(200)

    const headers = response?.headers()
    const contentDisposition = headers?.['content-disposition']
    expect(contentDisposition).toMatch(
      /future-value-calculation-\d{4}-\d{2}-\d{2}\.pdf/
    )
  })

  test('export route handles invalid parameters gracefully', async ({
    page,
  }) => {
    // Test with invalid numeric parameters
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv&initial=invalid&monthly=bad&return=error&years=wrong'
    )

    // Should still work with default values
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')
    // Should fall back to defaults
    expect(content).toContain('Initial Investment,10000')
    expect(content).toContain('Monthly Contribution,500')
  })

  test('export includes generation timestamp', async ({ page }) => {
    const response = await page.goto(
      'http://localhost:3007/api/export?format=csv'
    )
    expect(response?.status()).toBe(200)

    const content = await page.textContent('body')
    expect(content).toContain('Generated on:')

    // Check that timestamp is recent (within last minute)
    const timestampMatch = content.match(/Generated on: ([^\n]+)/)
    if (timestampMatch) {
      const timestamp = new Date(timestampMatch[1])
      const now = new Date()
      const diffMinutes = (now.getTime() - timestamp.getTime()) / (1000 * 60)
      expect(diffMinutes).toBeLessThan(2) // Should be within 2 minutes
    }
  })
})
